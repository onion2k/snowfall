!function(t){var e={};function n(a){if(e[a])return e[a].exports;var s=e[a]={i:a,l:!1,exports:{}};return t[a].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(a,s,function(e){return t[e]}.bind(null,s));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=0)}([function(t,e,n){t.exports=n(1)},function(t,e){var n=new Blob(["\n\n    let s = this;\n    let snowflakesUInt16;\n    let snowWorkerInstance = undefined;\n    \n    class snowWorkerWW {\n        constructor(data){\n            this.active = data.active;\n            this.width = data.width;\n            this.height = data.height;\n            this.snowflakesLifetime = data.lifetime;\n            this.snowflakes = [];\n            this.platforms = [];\n            this.prevTimestamp = Date.now();\n            this.fps = 60;\n            this.frameInterval = 1000 / this.fps;\n            this.timefactor = 1;\n            for (var i=0; i<this.active; i++) {\n                var x = Math.floor(Math.random() * this.width);\n                var y = Math.floor(Math.random() * this.height);\n                var s = Math.floor(2 + (Math.random()*3));\n                this.snowflakes.push({ x: x, y: y, vx: 80, vy: 40 + (Math.random()*60), s: s });\n                snowflakesUInt16[(i*3)+0] = x;\n                snowflakesUInt16[(i*3)+1] = y;\n                snowflakesUInt16[(i*3)+2] = s;\n            }\n            // s.postMessage({ snowflakes: this.snowflakes, snowflakesStatic: this.snowflakesStatic });\n            this.update();\n        }\n        screenmap(platforms) {\n            this.platforms = platforms;\n            this.snowflakes.forEach((f,i) => {\n                if (f.l>0) {\n                    let keep = false;\n                    platforms.forEach((platform) => {\n                        if ( (f.x > platform.left && f.x < platform.left+platform.width) ) { keep = true; }\n                    });\n                    if (!keep) { f.l=0; }\n                }\n            });\n        }\n        update() {\n\n            let timestamp = Date.now();\n            let delta = timestamp - this.prevTimestamp;\n            let deltaDistance = 1000/delta;\n    \n            this.snowflakes.forEach((f, i) => {\n                if (f.l > 0) {\n                    if (f.l--===0) {\n                        f.y = 0;\n                        f.x = Math.random()*this.width;\n                        f.vx = 80;\n                        f.vy = 40 + (Math.random()*60);\n                    }\n                } else {\n                    f.x += (Math.random()*(f.vx/deltaDistance) - ((f.vx/deltaDistance)/2)) * this.timefactor;\n                    f.y += (f.vy/deltaDistance) * this.timefactor;\n                    if (f.y>this.height) {\n                        f.y = 0;\n                        f.x = Math.random()*this.width;\n                    } else {\n                        this.platforms.forEach((platform) => {\n                            if ( (f.y > platform.top-3 && f.y < platform.top) && (f.x > platform.left && f.x < platform.left+platform.width) && Math.floor(Math.random()*2)%2==0 ) {\n                                f.l = this.snowflakesLifetime;\n                            }\n                        });\n                    }\n                }\n                snowflakesUInt16[(i*3)+0] = f.x;\n                snowflakesUInt16[(i*3)+1] = f.y;\n                snowflakesUInt16[(i*3)+2] = f.s;\n            });\n            // s.postMessage({ snowflakes: this.snowflakes });\n            this.prevTimestamp = timestamp;\n    \n            setTimeout(()=>{\n                this.update();\n            }, this.frameInterval);\n    \n        }\n    }\n    \n    s.addEventListener('message', (event) => {\n        if (event.data.type==='init') {\n            snowWorkerInstance = new snowWorkerWW(event.data);\n        } else if (event.data.type==='screenmap') {\n            if (!snowWorkerInstance) {\n                console.warn(\"No snowfall worker instance\");\n            } else {\n                snowWorkerInstance.screenmap(event.data.platforms);\n            }\n        } else {\n            snowflakesUInt16 = new Uint16Array(event.data);\n        }\n    });\n    \n"],{type:"text/javascript"});let a=new Worker(window.URL.createObjectURL(n));document.body.clientHeight;const s=document.body.offsetHeight;let o=new SharedArrayBuffer(1500*Uint16Array.BYTES_PER_ELEMENT*3),i=new Uint16Array(o);const r=document.createElement("canvas");r.style.position="fixed",r.style.top="0",r.style.left="0",r.width=document.body.clientWidth,r.height=document.body.clientHeight,r.style["pointer-events"]="none",document.body.appendChild(r);const f=r.getContext("2d");f.fillStyle="white",window.Worker?(a.postMessage(o),a.postMessage({type:"init",active:1500,lifetime:1e3,width:r.width,height:s})):console.log("Snowfall requires webworkers because reasons.");const l=()=>{let t=[];document.querySelectorAll(".rooftop").forEach(e=>{let n=e.getClientRects();t.push({left:n[0].left,width:n[0].width,top:n[0].top})}),a.postMessage({type:"screenmap",platforms:t})},h=()=>{f.clearRect(0,0,r.width,r.height);for(var t=0;t<1500;t++)f.beginPath(),f.arc(i[3*t+0],i[3*t+1]-document.body.scrollTop,i[3*t+2],0,2*Math.PI,!1),f.fill();requestAnimationFrame(h)};window.addEventListener("resize",l),l(),h()}]);